project(tesseract-ocr)
cmake_minimum_required(VERSION 2.8)

cmake_policy(SET CMP0026 OLD)

SET(tesseract_VERSION_MAJOR     3)
SET(tesseract_VERSION_MINOR     3)
SET(tesseract_VERSION           ${tesseract_VERSION_MAJOR}.${tesseract_VERSION_MINOR})

FIND_PACKAGE(Leptonica REQUIRED NO_MODULE PATHS ${Leptonica_DIR})

include_directories(${Leptonica_INCLUDE_DIRS})

add_definitions(-DUSE_STD_NAMESPACE)
if( NOT WIN32 )
  add_definitions(-fPIC)
endif()
add_definitions(-DWINDLLNAME="tesseract")

set(DUMMY_CPP "${CMAKE_BINARY_DIR}/dummy.cpp")
file(WRITE "${DUMMY_CPP}" "//autogenerated file by cmake\n")

add_subdirectory(ccutil)
add_subdirectory(viewer)
add_subdirectory(cutil)
add_subdirectory(opencl)
add_subdirectory(ccstruct)
add_subdirectory(dict)
add_subdirectory(classify)
add_subdirectory(wordrec)
add_subdirectory(neural_networks/runtime)
add_subdirectory(textord)
add_subdirectory(cube)
add_subdirectory(ccmain)
add_subdirectory(api)
add_subdirectory(tessdata)
add_subdirectory(doc)


####### Build merged static lib #######
list(APPEND TESSERACT_LIBRARY_SRCS "${DUMMY_CPP}")
if (WIN32)
    list(APPEND TESSERACT_LIBRARY_SRCS msvsport/gettimeofday.cpp)
endif()

add_library(tesseract_static STATIC ${TESSERACT_LIBRARY_SRCS})

list(APPEND TESSERACT_LIBRARIES
    tesseract_api_static
    tesseract_main_static
    tesseract_cube_static
    tesseract_neural_static
    tesseract_textord_static
    tesseract_wordrec_static
    tesseract_classify_static
    tesseract_dict_static
    tesseract_ccstruct_static
    tesseract_cutil_static
    tesseract_viewer_static
    tesseract_ccutil_static
    tesseract_opencl_static
)

set(TESSERACT_LIBRARIES_PATHS "")
foreach (LIB ${TESSERACT_LIBRARIES})
  get_target_property(LIB_FILE ${LIB} LOCATION)
  target_link_libraries(tesseract_static ${LIB_FILE})

  set(TESSERACT_LIBRARIES_PATHS "${TESSERACT_LIBRARIES_PATHS};${LIB_FILE}")
endforeach()

foreach(LIB ${Leptonica_LIBRARIES})
  get_target_property(LIB_FILE ${LIB} LOCATION)
  STRING(FIND ${LIB_FILE} ${CMAKE_SHARED_LIBRARY_SUFFIX} IS_LIB_SHARED)

  if( IS_LIB_SHARED EQUAL -1 )
    target_link_libraries(tesseract_static ${LIB_FILE})
    set(TESSERACT_LIBRARIES_PATHS "${TESSERACT_LIBRARIES_PATHS};${LIB_FILE}")
  endif()
endforeach()

if(WIN32)
    target_link_libraries(tesseract_static ws2_32.lib)
endif()

add_dependencies(tesseract_static ${TESSERACT_LIBRARIES})

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules")
include(MergeStaticLibraries)
set(CMAKE_BUILD_TYPE release)
MERGE_STATIC_LIBRARIES (tesseract_static ALL "${TESSERACT_LIBRARIES_PATHS}")
install(TARGETS tesseract_static DESTINATION lib)

SET( tesseract_INCLUDE_DIRS ${CMAKE_INSTALL_PREFIX}/include ${Leptonica_INCLUDE_DIRS})
SET( tesseract_LIBRARIES tesseract_static )
SET( tesseract_LIBRARIES ${tesseract_LIBRARIES} ${Leptonica_LIBRARIES} )

# Create a tesseractConfig.cmake file for use from the build tree
CONFIGURE_FILE(tesseractConfig.cmake.in
  "${CMAKE_CURRENT_BINARY_DIR}/tesseractConfig.cmake" @ONLY)

export(TARGETS tesseract_static FILE ${CMAKE_BINARY_DIR}/TesseractTargets.cmake)