project(tesseract-ocr)
cmake_minimum_required(VERSION 2.8)

cmake_policy(SET CMP0026 OLD)

FIND_PACKAGE(Leptonica REQUIRED PATHS ${Leptonica_DIR} NO_DEFAULT_PATH)

include_directories(${Leptonica_INCLUDE_DIRS})

add_definitions(-DUSE_STD_NAMESPACE)
add_definitions(-fPIC)
add_definitions(-DWINDLLNAME="tesseract")

SET(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR})

set(DUMMY_CPP "${CMAKE_BINARY_DIR}/dummy.cpp")
file(WRITE "${DUMMY_CPP}" "//autogenerated file by cmake\n")

add_subdirectory(ccutil)
add_subdirectory(viewer)
add_subdirectory(cutil)
add_subdirectory(opencl)
add_subdirectory(ccstruct)
add_subdirectory(dict)
add_subdirectory(classify)
add_subdirectory(wordrec)
add_subdirectory(neural_networks/runtime)
add_subdirectory(textord)
add_subdirectory(cube)
add_subdirectory(ccmain)
add_subdirectory(api)
add_subdirectory(tessdata)
add_subdirectory(doc)


####### Build merged static lib #######

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules")
include(MergeStaticLibraries)

list(APPEND TESSERACT_LIBRARY_SRCS "${DUMMY_CPP}")
if (WIN32)
    list(APPEND TESSERACT_LIBRARY_SRCS msvsport/gettimeofday.cpp)
endif()

add_library(tesseract_static STATIC ${TESSERACT_LIBRARY_SRCS})

list(APPEND TESSERACT_LIBRARIES
    tesseract_api_static
    tesseract_main_static
    tesseract_cube_static
    tesseract_neural_static
    tesseract_textord_static
    tesseract_wordrec_static
    tesseract_classify_static
    tesseract_dict_static
    tesseract_ccstruct_static
    tesseract_cutil_static
    tesseract_viewer_static
    tesseract_ccutil_static
    tesseract_opencl_static
)

set(TESSERACT_LIBRARIES_PATHS "")
foreach (LIB ${TESSERACT_LIBRARIES})
    get_target_property(LIB_FILE ${LIB} LOCATION)
    target_link_libraries(tesseract_static ${STATIC_LIB_LINK} ${LIB_FILE})

    set(TESSERACT_LIBRARIES_PATHS "${TESSERACT_LIBRARIES_PATHS};${LIB_FILE}")
endforeach()
target_link_libraries(tesseract_static ${STATIC_LIB_LINK} ${LEPTONICA_LIBRARIES})
if(WIN32)
    target_link_libraries(tesseract_static ws2_32.lib)
endif()

add_dependencies(tesseract_static ${TESSERACT_LIBRARIES})

set(CMAKE_BUILD_TYPE release)
MERGE_STATIC_LIBRARIES (tesseract_static ALL
    "${LEPTONICA_LIBRARIES}${TESSERACT_LIBRARIES_PATHS}"
)
install(TARGETS tesseract_static DESTINATION lib)

SET( tesseract_INCLUDE_DIRS ${CMAKE_INSTALL_PREFIX}/include )
SET( tesseract_LIBRARY_DIRS ${CMAKE_INSTALL_PREFIX}/lib )
SET( tesseract_DATA_DIR ${CMAKE_INSTALL_PREFIX}/share )

# Create a tesseractConfig.cmake file for the use from the build tree
CONFIGURE_FILE(tesseractConfig.cmake.in
  "${CMAKE_CURRENT_BINARY_DIR}/tesseractConfig.cmake" @ONLY)
CONFIGURE_FILE(Usetesseract.cmake.in
  "${CMAKE_CURRENT_BINARY_DIR}/Usetesseract.cmake" @ONLY)

########### install files ###############

# install(FILES  tesseract.pc DESTINATION )



#original Makefile.am contents follow:

### run autogen.sh to create Makefile.in from this file
#ACLOCAL_AMFLAGS = -I m4
#
#if ENABLE_TRAINING
#TRAINING_SUBDIR = training
#training:
#	@cd "$(top_builddir)/training" && $(MAKE)
#training-install:
#	@cd "$(top_builddir)/training" && $(MAKE) install
#clean-local:
#	@cd "$(top_builddir)/training" && $(MAKE) clean
#else
#training:
#	@echo "Need to reconfigure project, so there are no errors"
#endif
#
#.PHONY: install-langs ScrollView.jar install-jars $(TRAINING_SUBDIR)
#
#SUBDIRS = ccutil viewer cutil opencl ccstruct dict classify wordrec neural_networks/runtime textord cube ccmain api . tessdata doc
#
#EXTRA_DIST = ReleaseNotes \
#	aclocal.m4 config configure.ac autogen.sh contrib \
#	tesseract.pc.in $(TRAINING_SUBDIR) java doc testing
#
#DIST_SUBDIRS  = $(SUBDIRS) $(TRAINING_SUBDIR)
#
#uninstall-hook:
#	rm -rf $(DESTDIR)$(includedir)
#
#dist-hook:
## Need to remove .svn directories from directories
## added using EXTRA_DIST. $(distdir)/tessdata would in
## theory suffice.
#	rm -rf `find $(distdir) -name .svn`
#	rm -rf `find $(distdir) -name .git`
#	rm -rf `find $(distdir) -name .deps`
#	rm -rf `find $(distdir) -name .libs`
#	rm -rf `find $(distdir) -name *.o`
#	rm -rf `find $(distdir) -name *.lo`
#	rm -rf `find $(distdir) -name *.la`
#	rm -rf `find $(distdir)/training -executable -type f`
#	rm -rf $(distdir)/doc/html/*
#
#ScrollView.jar:
#	@cd "$(top_builddir)/java" && $(MAKE) $@
#
#install-jars:
#	@cd "$(top_builddir)/java" && $(MAKE) $@
#
#doc-dummy:
#
#doc: doc-dummy
#	-srcdir="$(top_srcdir)" builddir="$(top_builddir)" \
#	version="@PACKAGE_VERSION@" name="@PACKAGE_NAME@" \
#	doxygen $(top_srcdir)/doc/Doxyfile
#
#doc-pack: doc
#	-chmod a+r $(top_srcdir)/doc/html/*
#	 @tar --create --directory=$(top_srcdir)/doc/html --verbose --file=- . | gzip -c -9 > $(top_srcdir)/@PACKAGE_NAME@-@PACKAGE_VERSION@-doc-html.tar.gz;
#
#doc-clean:
#	rm -rf $(top_srcdir)/doc/html/*
#
#pkgconfigdir = $(libdir)/pkgconfig
#pkgconfig_DATA = tesseract.pc
